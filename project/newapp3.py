# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newapp3.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import tweepy
import pandas as pd
import xlsxwriter
import emoji
import re
import matplotlib
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
from pythainlp.tokenize import word_tokenize
from pythainlp.corpus import thai_stopwords
from spacy.lang.en.stop_words import STOP_WORDS
from datetime import date,timedelta,datetime
from textblob import TextBlob
from pandas_datareader import data
import mplfinance as fplt
import requests 
from bs4 import BeautifulSoup
import os
import threading
# ------------ access login ------------------------------------------
APIkey = ""
APIkeysecret = ""
accesstoken = ""
acceestokensecret = ""
login = tweepy.OAuthHandler(APIkey,APIkeysecret)
login.set_access_token(accesstoken,acceestokensecret)
api = tweepy.API(login,wait_on_rate_limit=True)
# --------------------------------------------------------------------
import sys
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(QtWidgets.QMainWindow):
    # ส่วน design ของหน้าโปรแกรม
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1297, 861)
        font = QtGui.QFont()
        font.setPointSize(16)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("G:/vscodework/programsearch/Magnifying glass.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(255, 207, 184);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.datestart = QtWidgets.QDateEdit(self.centralwidget)
        self.datestart.setGeometry(QtCore.QRect(430, 70, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.datestart.setFont(font)
        self.datestart.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.datestart.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.datestart.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.datestart.setWrapping(False)
        self.datestart.setFrame(True)
        self.datestart.setReadOnly(False)
        self.datestart.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.datestart.setAccelerated(False)
        self.datestart.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToPreviousValue)
        self.datestart.setKeyboardTracking(True)
        self.datestart.setProperty("showGroupSeparator", False)
        self.datestart.setDateTime(QtCore.QDateTime(QtCore.QDate(date.today()), QtCore.QTime(0, 0, 0)))
        self.datestart.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2000, 12, 31), QtCore.QTime(0, 0, 0)))
        self.datestart.setMinimumDate(QtCore.QDate(2000, 12, 31))
        self.datestart.setCurrentSection(QtWidgets.QDateTimeEdit.YearSection)
        self.datestart.setCalendarPopup(True)
        self.datestart.setObjectName("datestart")
        self.datefinish = QtWidgets.QDateEdit(self.centralwidget)
        self.datefinish.setGeometry(QtCore.QRect(600, 70, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.datefinish.setFont(font)
        self.datefinish.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.datefinish.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.datefinish.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.datefinish.setWrapping(False)
        self.datefinish.setFrame(True)
        self.datefinish.setReadOnly(False)
        self.datefinish.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.datefinish.setAccelerated(False)
        self.datefinish.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToPreviousValue)
        self.datefinish.setKeyboardTracking(True)
        self.datefinish.setProperty("showGroupSeparator", False)
        self.datefinish.setDateTime(QtCore.QDateTime(QtCore.QDate(date.today()), QtCore.QTime(0, 0, 0)))
        self.datefinish.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2000, 12, 31), QtCore.QTime(0, 0, 0)))
        self.datefinish.setMinimumDate(QtCore.QDate(2000, 12, 31))
        self.datefinish.setCurrentSection(QtWidgets.QDateTimeEdit.YearSection)
        self.datefinish.setCalendarPopup(True)
        self.datefinish.setObjectName("datefinish")
        self.labelsearch = QtWidgets.QLabel(self.centralwidget)
        self.labelsearch.setGeometry(QtCore.QRect(180, 20, 131, 61))
        font = QtGui.QFont()
        font.setFamily("Adobe Caslon Pro")
        font.setPointSize(33)
        font.setBold(False)
        font.setWeight(50)
        self.labelsearch.setFont(font)
        self.labelsearch.setObjectName("labelsearch")
        self.labelfrom = QtWidgets.QLabel(self.centralwidget)
        self.labelfrom.setGeometry(QtCore.QRect(480, 40, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelfrom.setFont(font)
        self.labelfrom.setObjectName("labelfrom")
        self.labelto = QtWidgets.QLabel(self.centralwidget)
        self.labelto.setGeometry(QtCore.QRect(660, 40, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelto.setFont(font)
        self.labelto.setObjectName("labelto")
        self.inputbox = QtWidgets.QLineEdit(self.centralwidget)
        self.inputbox.setGeometry(QtCore.QRect(110, 70, 291, 41))
        font = QtGui.QFont()
        font.setFamily("TH Sarabun New")
        font.setPointSize(16)
        self.inputbox.setFont(font)
        self.inputbox.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inputbox.setObjectName("inputbox")
        self.searchbutton = QtWidgets.QPushButton(self.centralwidget)
        self.searchbutton.setGeometry(QtCore.QRect(430, 120, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.searchbutton.setFont(font)
        self.searchbutton.setStyleSheet("background-color: rgb(142, 193, 255);")
        self.searchbutton.setObjectName("searchbutton")
        self.canclebutton = QtWidgets.QPushButton(self.centralwidget)
        self.canclebutton.setGeometry(QtCore.QRect(430, 170, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.canclebutton.setFont(font)
        self.canclebutton.setStyleSheet("background-color: rgb(255, 127, 123);")
        self.canclebutton.setObjectName("canclebutton")
        self.wordbox_tw = QtWidgets.QTextBrowser(self.centralwidget)
        self.wordbox_tw.setGeometry(QtCore.QRect(50, 560, 341, 251))
        self.wordbox_tw.setObjectName("wordbox_tw")
        self.labelsentiment_tw = QtWidgets.QLabel(self.centralwidget)
        self.labelsentiment_tw.setGeometry(QtCore.QRect(230, 230, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.labelsentiment_tw.setFont(font)
        self.labelsentiment_tw.setObjectName("labelsentiment_tw")
        self.labelwordnlp_tw = QtWidgets.QLabel(self.centralwidget)
        self.labelwordnlp_tw.setGeometry(QtCore.QRect(200, 520, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.labelwordnlp_tw.setFont(font)
        self.labelwordnlp_tw.setObjectName("labelwordnlp_tw")
        self.sentimentbox_tw = QtWidgets.QTextBrowser(self.centralwidget)
        self.sentimentbox_tw.setGeometry(QtCore.QRect(50, 260, 341, 251))
        self.sentimentbox_tw.setObjectName("sentimentbox_tw")
        self.searchbutton_stock = QtWidgets.QPushButton(self.centralwidget)
        self.searchbutton_stock.setGeometry(QtCore.QRect(950, 410, 271, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.searchbutton_stock.setFont(font)
        self.searchbutton_stock.setStyleSheet("background-color: rgb(85, 170, 127);")
        self.searchbutton_stock.setObjectName("searchbutton_stock")
        self.inputbox_stock = QtWidgets.QLineEdit(self.centralwidget)
        self.inputbox_stock.setGeometry(QtCore.QRect(950, 370, 271, 31))
        font = QtGui.QFont()
        font.setFamily("TH Sarabun New")
        font.setPointSize(13)
        self.inputbox_stock.setFont(font)
        self.inputbox_stock.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inputbox_stock.setObjectName("inputbox_stock")
        self.labelstock_2 = QtWidgets.QLabel(self.centralwidget)
        self.labelstock_2.setGeometry(QtCore.QRect(840, 360, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Adobe Caslon Pro")
        font.setPointSize(25)
        font.setBold(False)
        font.setWeight(50)
        self.labelstock_2.setFont(font)
        self.labelstock_2.setObjectName("labelstock_2")
        self.stockbox1 = QtWidgets.QTextBrowser(self.centralwidget)
        self.stockbox1.setGeometry(QtCore.QRect(810, 480, 441, 331))
        self.stockbox1.setObjectName("stockbox1")
        self.labelwordnlp_web = QtWidgets.QLabel(self.centralwidget)
        self.labelwordnlp_web.setGeometry(QtCore.QRect(580, 530, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.labelwordnlp_web.setFont(font)
        self.labelwordnlp_web.setObjectName("labelwordnlp_web")
        self.labelsentiment_web = QtWidgets.QLabel(self.centralwidget)
        self.labelsentiment_web.setGeometry(QtCore.QRect(620, 230, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.labelsentiment_web.setFont(font)
        self.labelsentiment_web.setObjectName("labelsentiment_web")
        self.wordbox_web = QtWidgets.QTextBrowser(self.centralwidget)
        self.wordbox_web.setGeometry(QtCore.QRect(410, 560, 341, 251))
        self.wordbox_web.setObjectName("wordbox_web")
        self.sentimentbox_web = QtWidgets.QTextBrowser(self.centralwidget)
        self.sentimentbox_web.setGeometry(QtCore.QRect(410, 260, 341, 251))
        self.sentimentbox_web.setObjectName("sentimentbox_web")
        self.labelnews_web = QtWidgets.QLabel(self.centralwidget)
        self.labelnews_web.setGeometry(QtCore.QRect(1010, 20, 241, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.labelnews_web.setFont(font)
        self.labelnews_web.setObjectName("labelnews_web")
        self.newsbox_web = QtWidgets.QTextBrowser(self.centralwidget)
        self.newsbox_web.setGeometry(QtCore.QRect(810, 50, 441, 311))
        self.newsbox_web.setObjectName("newsbox_web")
        self.inputwebbox = QtWidgets.QLineEdit(self.centralwidget)
        self.inputwebbox.setGeometry(QtCore.QRect(110, 150, 291, 41))
        font = QtGui.QFont()
        font.setFamily("TH Sarabun New")
        font.setPointSize(16)
        self.inputwebbox.setFont(font)
        self.inputwebbox.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inputwebbox.setObjectName("inputwebbox")
        self.labeltw = QtWidgets.QLabel(self.centralwidget)
        self.labeltw.setGeometry(QtCore.QRect(50, 80, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labeltw.setFont(font)
        self.labeltw.setObjectName("labeltw")
        self.labelweb = QtWidgets.QLabel(self.centralwidget)
        self.labelweb.setGeometry(QtCore.QRect(60, 160, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelweb.setFont(font)
        self.labelweb.setObjectName("labelweb")
        self.progressBar_twitter = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_twitter.setGeometry(QtCore.QRect(110, 120, 291, 16))
        self.progressBar_twitter.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.Kenya))
        self.progressBar_twitter.setProperty("value", 0)
        self.progressBar_twitter.setObjectName("progressBar_twitter")
        self.progressBar_web = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_web.setGeometry(QtCore.QRect(110, 200, 291, 16))
        self.progressBar_web.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.Kenya))
        self.progressBar_web.setProperty("value", 0)
        self.progressBar_web.setObjectName("progressBar_web")
        self.progressBar_stock = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_stock.setGeometry(QtCore.QRect(950, 450, 271, 16))
        self.progressBar_stock.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.progressBar_stock.setProperty("value", 0)
        self.progressBar_stock.setObjectName("progressBar_stock")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1297, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.canclebutton.clicked.connect(self.inputbox.clear)
        self.canclebutton.clicked.connect(self.inputwebbox.clear)
        #self.searchbutton.clicked.connect(self.run_twitter)
        #self.searchbutton.clicked.connect(self.run_web)
        self.searchbutton.clicked.connect(self.startandclear)
        self.searchbutton_stock.clicked.connect(self.run_stock)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Search Application"))
        self.datestart.setDisplayFormat(_translate("MainWindow", "yyyy-MM-dd"))
        self.datefinish.setDisplayFormat(_translate("MainWindow", "yyyy-MM-dd"))
        self.labelsearch.setText(_translate("MainWindow", "Search"))
        self.labelfrom.setText(_translate("MainWindow", "From :"))
        self.labelto.setText(_translate("MainWindow", "to :"))
        self.searchbutton.setText(_translate("MainWindow", "Search"))
        self.canclebutton.setText(_translate("MainWindow", "Cancle"))
        self.labelsentiment_tw.setText(_translate("MainWindow", "Sentiment  Twitter"))
        self.labelwordnlp_tw.setText(_translate("MainWindow", "Related Words Twitter"))
        self.searchbutton_stock.setText(_translate("MainWindow", "Search"))
        self.labelstock_2.setText(_translate("MainWindow", "Stock :"))
        self.labelwordnlp_web.setText(_translate("MainWindow", "Related Words Web"))
        self.labelsentiment_web.setText(_translate("MainWindow", "Sentiment Web"))
        self.labelnews_web.setText(_translate("MainWindow", "Web ( The most Keyword )"))
        self.labeltw.setText(_translate("MainWindow", "Twitter"))
        self.labelweb.setText(_translate("MainWindow", "Web"))
        self.progressBar_web.setFormat(_translate("MainWindow", "%p%"))
   
    # run twitter and web
    def startandclear(self): 
        self.progressBar_twitter.setValue(int(0)) # เมื่อกดsearch จะให้ progressbar ของทวิตเตอร์และเว็บ เซทเป็น 0
        self.progressBar_web.setValue(int(0))   
        self.run_twitter()  # สั่งทำงาน twitter
        self.run_web()      # สั่งทำงาน web

    ################################## TWITTER ##################################
    # today date
    def check_day(self):
        today_date = date.today()   # วันที่ปัจจุบัน
        return (today_date)

    # function search twitter (ช่วง crawler)
    def crawler_tw(self,word,sinceday,untilday):
        # ดึงข้อมูล twitter จำนวน 900 ทวิต
        tw = tweepy.Cursor(api.search, q=word, count=100, result_type="recent", tweet_mode='extended',since = sinceday , until = untilday ).items(900)   
        data = pd.DataFrame(columns = ["date","text","hashtag","retweet","favourite"])
        checktweet = []     # ใช้ check ทวิตที่ซ้ำกัน
        for tweet in tw :
            # hashtag
            entity_hashtag = tweet.entities.get('hashtags') # hashtag
            hashtag = ""
            for i in range(0,len(entity_hashtag)):
                hashtag = hashtag +"|#"+entity_hashtag[i]["text"]   # คั่นแต่ละแท็กด้วย |#
        
            # date
            date = tweet.created_at 
            
            # tweet
            try :
                text = tweet.retweeted_status.full_text            # มาจากการรี
                count_f = tweet.retweeted_status.favorite_count     # ไปดึงจำนวนfavของต้นฉบับแทน
                count_r = tweet.retweeted_status.retweet_count      # ไปดึงจำนวนreของต้นฉบับแทน 
                
            except:
                text = tweet.full_text              # มาจากต้นฉบับ
                count_f = tweet.favorite_count      # ดึงจำนวนfavได้เลย
                count_r = tweet.retweet_count       # ดึงจำนวนreได้เลย
        
            if text not in checktweet and len(checktweet)<800 : #เก็บข้อมูลไม่ซ้ำกันและไม่เกิน 800
                checktweet.append(text)     
                text_tw = text
                countre_tw = count_r
                countfav_tw = count_f
                # ตัด linkweb กับ hashtag ที่ติดมาในข้อความ
                text_tw = re.sub(r'https://\S+', '', text_tw, flags=re.MULTILINE)
                text_tw = re.sub(r'[\!\.\?\,\:\n\t\"\(\)\[\]]', '', text_tw, flags=re.MULTILINE)
                text_tw = re.sub(r'#\S+', '', text_tw, flags=re.MULTILINE)
                text_tw = text_tw.lower()
        
                def remove_emoji(text):     # clear emoji
                    return ''.join([c for c in text if c not in emoji.UNICODE_EMOJI])
                text_tw = remove_emoji(text_tw)

                new_column = pd.Series([date,text_tw,hashtag,countre_tw,countfav_tw], index=data.columns)   # เพิ่มข้อมูลในตาราง
                data = data.append(new_column,ignore_index=True)
        
            else :
                pass
    
        #save data
        if data.empty == True :     # don't have data save dataframe เปล่าๆ
            print('pass')
            nun = pd.DataFrame(columns = ["date","text","hashtag","retweet","favourite"])
            nun.to_excel('G:/vscodework/programsearch/twitter file/new_'+word+'.xlsx',index=False)
        else:       # have data save data ได้เลย
            data['date'] = data['date'].dt.date 
            data.to_excel('G:/vscodework/programsearch/twitter file/new_'+word+'.xlsx',index=False)
        return data

    # ///////// ส่วนในการเรียงข้อมูลและทำข้อมูลต่างๆเพื่อนำไปเก็บในฐานข้อมูล //////////
    # nlp word ------------------------------------------
    # ส่วน 1 เก็บในฐานข้อมูล ************
    # ตัด stopword และ ตัดคำออก
    def cleantext(self,word,data):
        text = str(data)
        search = str(word).lower()
        text = text.replace(search,'')      # ตัดคำที่ serach ออกไป
        # ตัดคำอื่นๆ
        text = re.sub(r'[0-9]', '', text, flags=re.MULTILINE)
        text = re.sub(r'นะคะ', '', text, flags=re.MULTILINE)
        text = re.sub(r'ค่ะ', '', text, flags=re.MULTILINE)
        text = re.sub(r'ครับ', '', text, flags=re.MULTILINE)
        text = re.sub(r'นะจ๊ะ', '', text, flags=re.MULTILINE)
        text = re.sub(r'\u200b', '', text, flags=re.MULTILINE)
        text = re.sub(r'[\t\n\"\'\@\’\;\-\_\ๆ\“\”\~\|\=\^\&\$\*\/\(\)\[\]\🥲\.\,\%\╥\—\•\﹏\️️️️฿\ \+\-\*\¢]','',text, flags=re.MULTILINE)
        stopwordth = list(thai_stopwords())     # list word for clear thai stopword
        stopworden = list(STOP_WORDS)           # list word for clear english stopword

        wordss = ''         # word for clear other stopword
        file_word = open('G:/vscodework/programsearch/otherstopword.txt', encoding='utf-8')
        readfile = file_word.read()
        wordss += readfile
        file_word.close()
        otherstopword  = wordss.split(',')

        slicewd = word_tokenize(text, keep_whitespace=False)
        result = [word for word in slicewd if len(word) > 2 and " " not in word]    # คำที่น้อยกว่า2ตัวอักษรเอาออก
        # คำที่เป็น stopword เอาออก
        result = [word for word in slicewd if word not in stopwordth and " " not in word]   
        result = [word for word in slicewd if word not in stopworden and " " not in word]
        result = [word for word in slicewd if word not in otherstopword and " " not in word]
        return ",".join(result)
    
    # เก็บข้อมูลที่ตัดลงpandas
    def wordnlp(self,word,dataframe):
        search = str(word)
        data = dataframe
        data = data.reset_index()
        newdata = pd.DataFrame(columns = ["date","text"])   # สร้าง dataframe เตรียมเอาข้อมูลเก็บ โดยมีวันที่กับข้อความ
 
        for i in range(len(data)):

            date = data['date'][i]
            text = self.cleantext(search,data['text'][i])       # ส่งข้อมูล text ไปทำการตัดคำในฟังก์ชัน cleantext
        
            new_column = pd.Series([date,text], index=newdata.columns)
            newdata = newdata.append(new_column,ignore_index=True)
        return newdata
    
    # ส่วน 2 เมื่อเรียกใช้งาน ***********
    # แยกคำจาก ','
    def tokenize(self,d):
        result = d.split(",")
        result = list(filter(None, result))
        return result
    
    # นับจำนวน สำหรับกำหนดวันที่และไม่กำหนดวันที่
    def countwordnlp_day(self,start,finish,dataframe) :
        daybox = start                  # วันที่เริ่มต้น (ถ้าไม่ได้กำหนดวันที่จะให้เป็น None)
        nowbox = finish                 # วันที่สิ้นสุด (ถ้าไม่ได้กำหนดวันที่จะให้เป็น None)

        # ให้ทำการดึงข้อมูลเฉพาะวันที่ที่เลือกไว้
        new_text = dataframe['text'].loc[(dataframe['date']<=nowbox)&(dataframe['date']>=daybox)]
        
        if new_text.empty == False :    # have data ตามวันที่เลือก
            # ใช้sklearn ในการทำงานแยกคำและนับจำนวน
            vectorizer = CountVectorizer(tokenizer=self.tokenize)
            transformed_data = vectorizer.fit_transform(new_text.astype('U').values)
            count_data = zip(vectorizer.get_feature_names(), np.ravel(transformed_data.sum(axis=0)))
            slword_df = pd.DataFrame(columns = ['word', 'count'])
            slword_df['word'] = vectorizer.get_feature_names()  # คำที่มี
            slword_df['count'] = np.ravel(transformed_data.sum(axis=0))     # จำนวนที่มี
            t = slword_df.groupby('word').sum()[['count']].sort_values(by=["count"],ascending=False).head(5)    # เลือกเอาตามจำนวนที่มี 5 อันดับแรก
            return t
        else :      # don't have data ตามวันที่เลือก
            slword_df = pd.DataFrame(columns = ['word', 'count'])
            return slword_df 

    # day retweet ------------------------------------------
    # show about day and re
    def daytwitt(self,dataframe):       
        data = dataframe
        data["date"] = data['date']
        daytweet = data.groupby('date').sum()[['retweet']]  # รวมวันที่กับจำนวนรีทวีตทั้งหมด
        return daytweet

    # sentiment thai and english ------------------------------------------
    def analyze_sentiment(self,start,finish,dataframe): 
        startday = start
        finishday = finish

        # เลือกตามวันที่ที่ต้องการมาวิเคราะห์
        
        new_text = dataframe['text'].loc[(dataframe['date']<=finishday)&(dataframe['date']>=startday)]

        if new_text.empty == False :
            # for thai
            pos_vocab = []
            neg_vocab = []

            with open('G:/vscodework/programsearch/positive.txt','r',encoding='utf-8') as f :
                for line in f :
                    pos_vocab.append(line.rstrip())
            with open('G:/vscodework/programsearch/negative.txt','r',encoding='utf-8') as f :
                for line in f :
                    neg_vocab.append(line.rstrip())
        
            pos = 0
            med = 0
            neg = 0
        
            for text in new_text:
                # english
                retext = TextBlob(str(text))
                textsentiment = retext.polarity
                if textsentiment < 0 :
                    neg += 1
                elif textsentiment > 0 :
                    pos += 1
                else : 
                    # thai
                    retext2 = word_tokenize(str(text),keep_whitespace=False)
                    p = 0       # positive for check sentence
                    n = 0       # negative for check sentence
                    m = 0       # neutral for check sentence
                    for subtext in retext2 : # แยกเป็นคำก่อนแล้วเอามารวมกันเพื่อพิจารณาประโยคอีกที
                        if subtext in pos_vocab:
                            p += 1
                        elif subtext in neg_vocab:
                            n += 1
                        else :
                            m += 1
                    # วิเคราะห์รวมประโยค
                    if p > n :
                        pos += 1
                    elif n > p :
                        neg += 1
                    else:
                        med += 1

            # เก็บข้อมูลลง dataframe         
            data = {'emotion':['positive','neutral','negative'],
                    'count':[pos,med,neg]}
    
            sentiment_df = pd.DataFrame(data)
            sentiment_df = sentiment_df.groupby('emotion').sum()[['count']]
            return sentiment_df
        else :
            sentiment_df = pd.DataFrame(columns = ['emotion', 'count'])
            return sentiment_df 

    # /////////////////////// วิเคราะห์และโชว์ข้อมูล ///////////////////////
    # plot twitter word nlp
    def plotwordnlp_day(self,start,finish,pathfile):
        check_file = pd.read_excel(pathfile)
        if check_file.empty == False :
            plt.rcParams['font.family'] = 'tahoma'
            plt.rcParams.update({'font.size': 16})
            wordnlp2 = pd.read_excel(pathfile,sheet_name = 'wordnlp')
            shownlp = self.countwordnlp_day(start,finish,wordnlp2)  # ไปทำการนับจำนวนข้อมูลก่อน
            # plot data
            if shownlp.empty == False :
                self.wordbox_tw.clear()
                shownlp.plot.barh(y='count',color='orange',title = "the most word twitter")
                plt.savefig('G:/vscodework/programsearch/twitter file/wordplot.jpg')
                self.wordbox_tw.setStyleSheet("border-image: url(G:/vscodework/programsearch/twitter file/wordplot.jpg);")
            else :
                self.wordbox_tw.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.wordbox_tw.setText('No data')
        else :
            # plot data
            self.wordbox_tw.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.wordbox_tw.setText('No data')

    # plot twitter sentiment
    def sh_twsentiment(self,start,finish,pathfile):
        check_file = pd.read_excel(pathfile)
        if check_file.empty == False :
            plt.rcParams['font.family'] = 'tahoma'
            plt.rcParams.update({'font.size': 16})
            data = pd.read_excel(pathfile,sheet_name = 'data')
            twitsenti = self.analyze_sentiment(start,finish,data)   # ไปทำการวิเคราะห์ข้อมูลก่อน
            # plot data
            if twitsenti.empty == False :
                self.sentimentbox_tw.clear()
                twitsenti.to_excel('G:/vscodework/programsearch/twitter file/sentiment.xlsx')
                twitsenti.plot.pie(y='count',startangle=60,colors = ['red','grey','green'],autopct='%d%%')
                plt.savefig('G:/vscodework/programsearch/twitter file/twittersentiment.jpg') 
                self.sentimentbox_tw.setStyleSheet("border-image: url(G:/vscodework/programsearch/twitter file/twittersentiment.jpg);")
            else :
                self.sentimentbox_tw.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.sentimentbox_tw.setText('No data')
        else :
            # plot data
            self.sentimentbox_tw.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.sentimentbox_tw.setText('No data')

    # -------------------  update -------------------////////////
    # เก็บข้อมูลเพื่อนำไปใช้ (สำหรับข้อมูลใหม่)
    def save_new_data(self,search): 
        path_new = 'G:/vscodework/programsearch/twitter file/new_'+search+'.xlsx'
        data = pd.read_excel(path_new)
        # ขั้นตอนจัดเก็บข้อมูล
        with pd.ExcelWriter('G:/vscodework/programsearch/twitter file/'+search+'.xlsx') as writer:
            data.to_excel(writer,sheet_name ='data',index=False)    # all data
            self.wordnlp(search,data).to_excel(writer,sheet_name ='wordnlp')    # word nlp
            self.daytwitt(data).to_excel(writer,sheet_name ='date')             # day and retweet
        os.remove(path_new)

    # check data have or no
    def checkdata(self,word):
        data = ''   # อ่านข้อมูลเพื่อดูว่าเคย search หรือยัง
        file_word = open('G:/vscodework/programsearch/twitter file/listsearch.txt', encoding='utf-8')
        readfile = file_word.read()
        data += readfile
        file_word.close()
        data = data.split(',')
        if word in data :
            return 'yes'
        else:
            return 'no'

    # รวม data twitter
    def concatdata_tw(self,search):
        # รวมข้อมูลเก่ากับใหม่
        path_new = 'G:/vscodework/programsearch/twitter file/new_'+search+'.xlsx'
        olddata = pd.read_excel('G:/vscodework/programsearch/twitter file/'+search+'.xlsx',sheet_name = 'data') # olddata
        olddata['date'] = olddata['date'].dt.date
        newdata = pd.read_excel(path_new)   # newdata
        andfile = pd.concat([newdata,olddata] , axis=0) # รวมกันโดยไม่ให้ซ้ำโดยเอาข้อมูลใหม่ในการตั้ง
        update_data = andfile.drop_duplicates(subset='text',keep='first')
        update_data = update_data.sort_values(by=['date'],ascending=False)
        update_data.to_excel('G:/vscodework/programsearch/twitter file/'+ search +'.xlsx',index = False)
        data = pd.read_excel('G:/vscodework/programsearch/twitter file/'+search+'.xlsx')       
        with pd.ExcelWriter('G:/vscodework/programsearch/twitter file/'+search+'.xlsx') as writer: # เซฟข้อมูลพร้อมวิเคราะห์
            update_data.to_excel(writer,sheet_name ='data',index=False)
            self.wordnlp(search,data).to_excel(writer,sheet_name ='wordnlp')
            self.daytwitt(data).to_excel(writer,sheet_name ='date')
        os.remove(path_new)

    # update oldest date file to start date     
    def update_olddata(self,search,listdate):
        # เข้า Qthread ในการอัพเดตทวิตเตอร์
        self.work_last = update_tw(self,search,listdate) 
        self.work_last.start()
        self.work_last.update_progress.connect(self.evn_pro)    # ใช้ update progressbar twitter
        self.work_last.finished.connect(self.printtwitter)

    # run data ของ twitter
    def run_twitter(self):
        search = self.inputbox.text()
        if search != '' :
            start = self.datestart.text()
            stop = self.datefinish.text()
            today = str(self.check_day())
           # วันที่ก่อนวันที่ปัจจุบันไม่เกิน 7 วัน
            lessthanseven = self.check_day()-timedelta(days=7)
            print("area date of twitter : " + str(lessthanseven))

            check_file = self.checkdata(search)  # check ว่าเคย search หรือยัง
            if check_file == 'no' :     # ยังไม่เคย
                print('no data twitter : now search')
                # เข้า Qthread search twitter
                if start >= str(lessthanseven) :    # กรณีวันที่เลือกไม่เกิน 7 วันของขอบเขตทวิตเตอร์ ให้เริ่ม search วันที่เลือก
                    self.worktw = searchtw_new(self,search,start,stop) 
                    self.worktw.start()
                else :      # กรณีวันที่เลือกเกิน 7 วันของขอบเขตทวิตเตอร์ ให้เริ่ม search วันขอบเขต
                    self.worktw = searchtw_new(self,search,str(lessthanseven),stop)
                    self.worktw.start()
                self.worktw.update_progress.connect(self.evn_pro)
                self.worktw.finished.connect(self.printtwitter)
            else :       # เคยแล้ว
                # check วันที่ที่มีในไฟล์คำคีย์เวิร์ด
                listdate_file = []
                filedata = pd.read_excel('G:/vscodework/programsearch/twitter file/'+search+'.xlsx',sheet_name='date')
                datehave = filedata['date']
                for date in range(len(filedata)):
                    listdate_file.append((str(datehave[date])).replace(' 00:00:00',''))
                
                listnothave_date = []   # เก็บวันที่ไม่มีในไฟล์
                # ดูวันที่เลือก
                start_date = datetime.strptime(start, '%Y-%m-%d')
                stop_date = datetime.strptime(stop, '%Y-%m-%d')
                rangedate = (stop_date - start_date).days + 1   # จำนวนวันที่เลือก
                # วนลูปหาวันที่เลือกที่ไม่มีในไฟล์คำคีย์เวิร์ด
                check_date_now = stop_date
                for i in range(rangedate):
                    string_date = str(check_date_now).replace(' 00:00:00','')
                    if string_date not in listdate_file and string_date >= str(lessthanseven) :
                        listnothave_date.append(string_date)
                    else:
                        pass
                    check_date_now = check_date_now - timedelta(days=1)
                
                if listnothave_date != [] : # กรณีมีวันที่ที่ไม่มี เข้าไปอัพเดต
                    self.update_olddata(search,listnothave_date)
                else :      # กรณีวันที่มีครบแล้วให้ทำการวิเคราะห์และแสดงผลได้เลย
                    self.printtwitter()
    
    # plot twitter
    def plot_twitter(self):   # plot wordnlp , sentiment
        search = self.inputbox.text()
        pathfile = 'G:/vscodework/programsearch/twitter file/'+search+'.xlsx'
        startday = self.datestart.text()
        finishday = self.datefinish.text()
        self.plotwordnlp_day(startday,finishday,pathfile)
        self.sh_twsentiment(startday,finishday,pathfile)

    # show twitter in ui      
    def printtwitter(self):
        self.plot_twitter() 
        self.progressBar_twitter.setValue(int(100))
        print('finishhh search data') 
                  
    # set value progressbar twitter
    def evn_pro(self,val):
        self.progressBar_twitter.setValue(val)
    
    ################################## STOCK ##################################
    # search stock if thai stock เติม .BK
    def search_stock(self,name,datestart,datestop): # search stock with date
        df = data.DataReader(name,data_source='yahoo',start=str(datestart),end=str(datestop))
        df = df.sort_values(by=['Date'],ascending=False)
        df.to_excel('G:/vscodework/programsearch/stock file/' + name + '.xlsx')

    # run data ของ stock 
    def run_stock(self):
        search = self.inputbox_stock.text()
        self.progressBar_stock.setValue(int(0))
        if search != '':
            datestart = self.datestart.text()
            datestop = self.datefinish.text()
            # เข้า Qthread search stock
            self.workstock = searchstock_new(self,search,datestart,datestop)
            self.workstock.start()
            self.workstock.update_progress2.connect(self.evn_pro_stock)
            self.workstock.finished.connect(self.printstock)
   
    # plot stock
    def show_stock(self):
        name = self.inputbox_stock.text()
        datestart = self.datestart.text()
        datestop = self.datefinish.text() # ทำการ plot stock
        data_st = pd.read_excel('G:/vscodework/programsearch/stock file/' + name + '.xlsx',index_col=0, parse_dates=True )
        data_st = data_st.iloc[::-1]
        data_range = pd.date_range(start=datestart, end=datestop)
        data_st = data_st[data_st.index.isin(data_range)]
        fplt.plot(data_st,type='candle',style='charles',title = 'Stock : '+name,savefig='G:/vscodework/programsearch/stock file/stockplot.jpg')
        self.stockbox1.setStyleSheet("border-image: url(G:/vscodework/programsearch/stock file/stockplot.jpg);")
        
    # set value progressbar stock
    def evn_pro_stock(self,val):
        self.progressBar_stock.setValue(val)

    # show stock in ui
    def printstock(self):
        self.show_stock() 
        self.progressBar_stock.setValue(int(100))
        print('finishhh search stock') 

    ################################## web ##################################
    # search web
    def search_web(self,name,url,linknews): 
        frame = pd.DataFrame(columns = ["date","text","link"])
        nameweb = name      # name website
        print(nameweb)

        weburl = url        # link website
        print('web : ' + weburl)

        webdata = requests.get(weburl)
        print(webdata)

        datenow = date.today()
        soup = BeautifulSoup(webdata.text,'html.parser')
        news = soup.find_all('a',href=True)

        listpath = [] 
        # ดึงขั้นที่ 1
        for i in news:
            headnews = i.getText()  # headline news 1
            headnews = headnews.lower()
            headnews = re.sub(r'[\!\.\?\,\:\n\t\"\(\)\[\]\#]', '',headnews, flags=re.MULTILINE)
            if headnews == '' :
                headnews = None     
            webnews = i['href']     # link for crawler web 1
            checkref = re.findall(r'http',webnews)
            checkref2 = re.findall(r'www.',webnews)
            if checkref == [] and checkref2 == [] :
                if len(webnews) >= 1 :
                    if webnews[0] != '/':
                        webnews = '/'+webnews
                path = linknews + webnews
            else :
                path = webnews

            # for check link is ok ?
            if path[0] == '/' and path[1] == '/' and path[2] == 'w':
                path = re.sub(r'//','https://',path, flags=re.MULTILINE)
            elif path[0] == '/' and path[1] == '/' and path[2] == 'h':
                path = re.sub(r'//','',path, flags=re.MULTILINE)
            
            # ดึงขั้นที่ 2
            checkpathfr = re.findall(linknews,path)
            if (path)[-1] not in [':',';',')'] and checkpathfr != [] and path[0] in ['h','w'] and len(listpath) <= 200 :
                listpath += path
                search2 = requests.get(path)
                soup2 = BeautifulSoup(search2.text,'html.parser')
                news2 = soup2.find_all('a',href=True)
        
                for j in news2:
                    headnews2 = j.getText()     # headline news 2
                    headnews2 = re.sub(r'[\!\.\?\,\:\n\t\"\(\)\[\]]', '',headnews2, flags=re.MULTILINE)
                    if headnews2 == '' :
                        headnews2 = None

                    webnews2 = j['href']    # link for crawler web 2
                    seccheckref = re.findall(r'http',webnews2)
                    seccheckref2 = re.findall(r'www.',webnews2)
                    if seccheckref == [] and seccheckref2 == [] :
                        path2 = linknews + webnews2
                    else :
                        path2 = webnews2
                    new_column = pd.Series([datenow,headnews2,path2], index=frame.columns)   
                    frame = frame.append(new_column,ignore_index=True)
            # save data all
            new_column = pd.Series([datenow,headnews,path], index=frame.columns)   
            frame = frame.append(new_column,ignore_index=True)
        frame = frame.dropna() 
        frame = frame.drop_duplicates(subset='text',keep='first') 
        frame.to_excel('G:/vscodework/programsearch/web file/'+nameweb+'/'+str(datenow)+'.xlsx',index=False,sheet_name ='data')

    # update web today
    def updateweb(self):
        nameweb = []    # อ่านชื่อเว็บจากไฟล์ txt
        with open('G:/vscodework/programsearch/web file/nameweb.txt','r',encoding='utf-8') as f :
            for line in f :
                nameweb.append(line.rstrip())
        web =   []      # อ่านlinkเว็บจากไฟล์ txt
        with open('G:/vscodework/programsearch/web file/web.txt','r',encoding='utf-8') as f :
            for line in f :
                web.append(line.rstrip())
        forlink = []    # อ่านlinkเว็บเพื่อsaveจากไฟล์ txt
        with open('G:/vscodework/programsearch/web file/link web.txt','r',encoding='utf-8') as f :
            for line in f :
                forlink.append(line.rstrip())
        numweb = len(nameweb)
        # เข้า Qthread search web
        self.workweb = searchweb_new(self,nameweb,web,forlink,numweb)
        self.workweb.start()
        self.workweb.update_progress3.connect(self.evn_pro_web)
        self.workweb.finished.connect(self.use_data_check)

    # set value progressbar web
    def evn_pro_web(self,val):
        self.progressBar_web.setValue(val)
        
    # data web to use
    def use_data_check(self):
        # เข้า QThread ในการเช็คคำ keyword
        word_web = self.inputwebbox.text()
        word_web = word_web.lower()
        startweb = self.datestart.text()
        stopweb = self.datefinish.text()
        self.startwebcheck = checkdataweball(self,word_web,startweb,stopweb)
        self.startwebcheck.start()
        self.startwebcheck.update_progress4.connect(self.evn_pro_web)
        self.startwebcheck.finished.connect(self.printweb)
        
    # plot web
    def printweb(self):
        # plot data web 
        self.progressBar_web.setValue(int(90))
        pathfile = 'G:/vscodework/programsearch/web file/usedata.xlsx' 
        dataframe_nlp = pd.read_excel(pathfile,sheet_name ='wordnlp')
        shownlp = self.countwordnlp_day(None,None,dataframe_nlp)
        self.plotwordnlp_web(shownlp)   # word nlp
        data_sentiment = pd.read_excel(pathfile,sheet_name = 'data')
        websenti = self.analyze_sentiment(None,None,data_sentiment)
        self.plotsentiment_web(websenti)    # sentiment
        most_web = pd.read_excel(pathfile,sheet_name = 'mostkey').sort_values(by=['count'],ascending=False).head(3)
        self.plotmostweb(most_web)  # most web
        self.progressBar_web.setValue(int(100))
        print('finishhh search web')

    # plot word nlp web
    def plotwordnlp_web(self,dataframe):
        # plot data
        shownlp = dataframe
        plt.rcParams['font.family'] = 'tahoma'
        plt.rcParams.update({'font.size': 16})
        if shownlp.empty == False :
            self.wordbox_web.clear()
            shownlp.plot.barh(y='count',color='orange',title = "the most word web")
            plt.savefig('G:/vscodework/programsearch/web file/webwordplot.jpg')
            self.wordbox_web.setStyleSheet("border-image: url(G:/vscodework/programsearch/web file/webwordplot.jpg);")
        else :
            self.wordbox_web.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.wordbox_web.setText('No data')

    # plot sentiment web
    def plotsentiment_web(self,dataframe):
        # plot data
        websenti = dataframe
        plt.rcParams['font.family'] = 'tahoma'
        plt.rcParams.update({'font.size': 16})
        if websenti.empty == False :
            self.sentimentbox_web.clear()
            websenti.to_excel('G:/vscodework/programsearch/web file/sentiment.xlsx')
            websenti.plot.pie(y='count',startangle=60,colors = ['red','grey','green'],autopct='%d%%')
            plt.savefig('G:/vscodework/programsearch/web file/websentiment.jpg') 
            self.sentimentbox_web.setStyleSheet("border-image: url(G:/vscodework/programsearch/web file/websentiment.jpg);")
        else:
            self.sentimentbox_web.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.sentimentbox_web.setText('No data')
    
    # plot most web
    def plotmostweb(self,dataframe):
        # plot data
        most_web = dataframe
        if most_web.empty == False :
            self.newsbox_web.clear()
            most_web.plot.bar(x='name', y='count')
            plt.xticks(rotation=360)
            plt.savefig('G:/vscodework/programsearch/web file/mostwordweb.jpg') 
            self.newsbox_web.setStyleSheet("border-image: url(G:/vscodework/programsearch/web file/mostwordweb.jpg);")
        else :
            self.newsbox_web.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.newsbox_web.setText('No data')

    # check คำ และรวมข้อมูลใหม่ เพื่อนำไปทำข้อมูลโชว์
    def checkword_news(self,word,datestart,datestop):
        search = str(word) 
        start = datetime.strptime(datestart, '%Y-%m-%d')
        stop = datetime.strptime(datestop, '%Y-%m-%d')

        nameweb = []        # ชื่อเว็บทั้งหมด ( ชื่อเว็บกับชื่อไฟล์ที่เซฟจะเหมือนกัน )
        with open('G:/vscodework/programsearch/web file/nameweb.txt','r',encoding='utf-8') as f :
            for line in f :
                nameweb.append(line.rstrip())

        day = (stop - start).days
        print('check : '+str(day)+' day')
        
        datecheck = stop
        worddata = pd.DataFrame(columns = ["date","text","link"])
        mostkeywebs = pd.DataFrame(columns = ["name","count"])
        # วนลูปตามวันที่เลือก
        while datecheck >= start :
            print('date check : '+ str(datecheck))
            for j in range(len(nameweb)):
                print(nameweb[j])
                datedata = str(datecheck).replace(' 00:00:00','')
                path2  = 'G:/vscodework/programsearch/web file/'+nameweb[j]+'/'+datedata+'.xlsx'
                if os.path.isfile(path2) == True :  # มีไฟล์ข้อมูลตามวันที่
                    print('have news : check word')
                    data2 = pd.read_excel(path2,sheet_name ='data')
                    data2['text'] = data2['text'].str.lower()
                    wordweb = data2[data2['text'].str.contains(search)] # หา text ที่มีคำ keyword
                    worddata = worddata.append(wordweb,ignore_index=True)
                
                    name = nameweb[j]
                    count = len(wordweb)
                
                    new_column = pd.Series([name,count], index=mostkeywebs.columns)   
                    mostkeywebs = mostkeywebs.append(new_column,ignore_index=True)   # เก็บเว็บและจำนวนที่พบ

                else:
                    print('no news : pass')

            datecheck = datecheck - timedelta(days=1)
        mostkeywebs = mostkeywebs.groupby('name').sum()[['count']].sort_values(by=["count"],ascending=False)
        # save data all for use to show on UI
        with pd.ExcelWriter('G:/vscodework/programsearch/web file/usedata.xlsx') as writer:
            worddata.to_excel(writer,sheet_name ='data',index=False)
            self.wordnlp(word,worddata).to_excel(writer,sheet_name ='wordnlp')
            mostkeywebs.to_excel(writer,sheet_name ='mostkey')

    # run data ของ web
    def run_web(self):
        search = self.inputwebbox.text()
        if search != '' :
            todaydate = str(self.check_day())
            path = 'G:/vscodework/programsearch/web file/tnews/'+todaydate+'.xlsx'
            checkdata_today = os.path.isfile(path)
            # check ว่าวันนี้มีข้อมูลเว็บหรือยัง
            if checkdata_today == False : # ไม่มีให้ไปค้นหา
                print('no data today')
                self.updateweb()
            else :      # มีข้อมูลให้ไปค้นตามคีย์เวิร์ดต่อ
                print('have data')
                self.use_data_check()

# Qthread twitter
class searchtw_new(QThread):
    update_progress = pyqtSignal(int)
    def __init__(self,parent = None,word = '',sinceday = '',untilday = ''):
        super(QThread,self).__init__(parent)
        self.word = word
        self.sinceday = datetime.strptime(sinceday, '%Y-%m-%d')
        self.untilday = datetime.strptime(untilday, '%Y-%m-%d')
        self.Ui = Ui_MainWindow()
        self.countday = (self.untilday - self.sinceday).days
        self.day = timedelta(days=1)  #เปลี่ยนค่าdate 1
    
    def run(self):
        counter_progress = 0
        down = self.countday + 1
        percen = (1/down)*90        # ใช้วันที่ในการแบ่งเปอร์เซ็นของ progressbar
        each_per = round(percen,0)
        while self.sinceday <= self.untilday :
            self.update_progress.emit(counter_progress)
            if self.Ui.checkdata(self.word) == 'no' :
                print("search : " + str(self.untilday))     
                tw_craw = self.Ui.crawler_tw(self.word,self.untilday,self.untilday+self.day)    # เข้าไปดึงข้อมูลตามวันที่
                if tw_craw.empty == False : # ไม่มีข้อมูล
                    # เก็บคีย์เวิร์ดเพื่อใช้ในการเช็คเสิร์ชครั้งต่อไป
                    f = open('G:/vscodework/programsearch/twitter file/listsearch.txt','a', encoding='utf-8')
                    f.write(','+self.word)
                    f.close()
                    self.Ui.save_new_data(self.word)    # เก็บข้อมูลใหม่
                    self.untilday = self.untilday - self.day
                else :
                    self.Ui.save_new_data(self.word)    # เก็บข้อมูลใหม่
                    self.sinceday = self.untilday + timedelta(days=1) 

            else :
                # มีข้อมูล
                print("update : " + str(self.untilday))
                self.Ui.crawler_tw(self.word,self.untilday,self.untilday+self.day)
                self.Ui.concatdata_tw(self.word)      # รวมข้อมูลเก่ากับใหม่
                self.untilday = self.untilday - self.day
            counter_progress += int(each_per)       # update progressbar ตาม percen ที่ตั้งไว้
            self.update_progress.emit(counter_progress)
        counter_progress = 90
        self.update_progress.emit(counter_progress)

class update_tw(QThread):
    update_progress = pyqtSignal(int)
    def __init__(self,parent = None,word = '',listnodate = ''):
        super(QThread,self).__init__(parent)
        self.word = word
        self.listnodate = listnodate
        self.Ui = Ui_MainWindow()
        self.day = timedelta(days=1)
    
    def run(self):
        counter_progress = 0
        down = len(self.listnodate)
        percen = (1/down)*90
        each_per = round(percen,0)
        # วนรอบการอัพเดตจนครบที่วัน
        for numdate in range(len(self.listnodate)):
            date_search = self.listnodate[numdate]
            change_typedate = datetime.strptime(date_search, '%Y-%m-%d')
            print("update : " + date_search)
            self.Ui.crawler_tw(self.word,change_typedate,change_typedate+self.day)  # ดึงข้อมูล
            self.Ui.concatdata_tw(self.word)        # รวมข้อมูลเก่ากับใหม่

            counter_progress += int(each_per)
            self.update_progress.emit(counter_progress)
        counter_progress = 90
        self.update_progress.emit(counter_progress)

# Qthread stock
class searchstock_new(QThread):
    update_progress2 = pyqtSignal(int)
    def __init__(self,parent = None,word = '',sinceday = '',untilday = ''):
        super(QThread,self).__init__(parent)
        self.word = word
        self.sinceday = sinceday
        self.untilday = untilday
        self.Ui = Ui_MainWindow()
    
    def run(self):
        counter_progress2 = 0
        self.update_progress2.emit(counter_progress2)
        
        print("search : "+ self.sinceday + " to " + self.untilday )
        counter_progress2 = 30
        self.update_progress2.emit(counter_progress2)   
        self.Ui.search_stock(self.word,self.sinceday,self.untilday) # search stock
        counter_progress2 = 90  # update progressbar
        self.update_progress2.emit(counter_progress2)

# Qthread web
class searchweb_new(QThread):
    update_progress3 = pyqtSignal(int)
    def __init__(self,parent = None,nameweb = '',web = '',forlink = '',numweb=''):
        super(QThread,self).__init__(parent)
        self.nameweb = nameweb
        self.web = web
        self.forlink = forlink
        self.numweb = numweb
        self.Ui = Ui_MainWindow()

    def run(self):
        counter_progress3 = 0
        num = 1
        for i in range(self.numweb):
            if os.path.isfile('G:/vscodework/programsearch/web file/'+self.nameweb[i]+'/'+str(date.today())+'.xlsx') == False:
                self.Ui.search_web(self.nameweb[i],self.web[i],self.forlink[i])     # search web
            if (i+1)%2 == 0 :   # web 100 link ให้ 2 link ต่อ 1 percen
                counter_progress3 += int(num)
                self.update_progress3.emit(counter_progress3)
        counter_progress3 = 60
        self.update_progress3.emit(counter_progress3)

class checkdataweball(QThread):
    update_progress4 = pyqtSignal(int)
    def __init__(self,parent = None,word = '',sinceday = '',untilday = ''):
        super(QThread,self).__init__(parent)
        self.word = word
        self.sinceday = sinceday
        self.untilday = untilday
        self.Ui = Ui_MainWindow()
    
    def run(self):
        counter_progress4 = 60
        self.update_progress4.emit(counter_progress4)
        self.Ui.checkword_news(self.word,self.sinceday,self.untilday)   # check keyword in data file
        counter_progress4 = 80  # update progressbar
        self.update_progress4.emit(counter_progress4)
 


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

